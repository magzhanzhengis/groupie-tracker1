{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "tour4",
  "steps": [
    {
      "file": "main.go",
      "description": "Perfect! You're asking a deep and important Go question — let's break it down **very clearly and simply**:\n\n---\n\n## ✅ What Does \"Reference Type\" Mean?\n\nIn Go, there are two big families of types:\n\n| Type Family      | Examples                      | What's stored?                |\n|------------------|-------------------------------|-------------------------------|\n| **Value types**  | `int`, `float64`, `bool`, `struct` | The actual value itself       |\n| **Reference types** | `slice`, `map`, `chan`, `pointer`, `interface`, `function` | A **reference (pointer)** to the actual data |\n\nSo when we say \"reference type,\" we mean:\n> The variable **points to** some data stored somewhere else (not the value itself).\n\n---\n\n## 💡 Example: Value Type vs Reference Type\n\n```go\nx := 5         // x is a value type (int)\ny := []int{1, 2, 3}  // y is a reference type (slice)\n```\n\n- `x` holds the **number 5** directly.\n- `y` holds a **reference (pointer)** to an array `[1, 2, 3]`.\n\n---\n\n## 🧠 So What Is `nil`?\n\n`nil` in Go means:\n> “This reference points to **nothing** right now.”\n\nIt’s like an empty pointer.\n\n---\n\n## ✅ You Can Set `nil` for Reference Types\n\nThese types can be `nil`:\n\n| Type       | Can be `nil`? | Why? |\n|------------|---------------|------|\n| `slice`    | ✅ Yes         | It's just a reference to an array |\n| `map`      | ✅ Yes         | It's a reference to a hash table |\n| `pointer`  | ✅ Yes         | It can point to nothing |\n| `interface`| ✅ Yes         | It can be empty (no value, no type) |\n| `chan`     | ✅ Yes         | It's a reference to a channel |\n\nSo if you're working with:\n```go\nvar numbers []int = nil\nvar person *Person = nil\n```\n\nThis means:\n> “I have a place that **could** point to data, but currently it points to **nothing**.”\n\n---\n\n## ❌ You CANNOT set `nil` for **structs**\n\nStructs are **value types**.\n\nExample:\n```go\ntype Artist struct {\n    ID   int\n    Name string\n}\n\nvar a Artist = nil // ❌ This is invalid!\n```\n\nBecause `a` is a **value**, not a pointer — Go expects you to give it actual memory with default values.\n\nSo instead, we use:\n```go\nvar a Artist = Artist{} // ✅ This works!\n```\n\nThat gives you a valid struct with default (zero) values:\n- `ID = 0`\n- `Name = \"\"`\n\n---\n\n## 🧩 Visual Analogy\n\nImagine:\n\n- `struct` is like a **box** you fill with stuff right away\n- `pointer`, `slice`, or `map` is like a **label or link** to some box — but the link might be empty (`nil`)\n\nYou can’t say “this box is nil,” but you can say “this label points to nothing.”\n\n---\n\n## ✅ Summary\n\n| Type         | What is it?            | Can be nil? | Why? |\n|--------------|------------------------|-------------|------|\n| `struct`     | Actual object (value)  | ❌ No        | It’s a value — needs to exist |\n| `*struct`    | Pointer to a struct    | ✅ Yes       | It’s a reference |\n| `[]Type`     | Slice (points to array)| ✅ Yes       | It’s a reference |\n| `map`        | Points to a map        | ✅ Yes       | It’s a reference |\n\n---\n\nLet me know if you'd like an animation or drawing-style visual to help see the difference — happy to create that too!",
      "line": 69
    }
  ],
  "ref": "main"
}